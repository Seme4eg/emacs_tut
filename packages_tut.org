* Preinstalled packages
** Dired
~C-x C-f~ (def shortcut) <RET> -- open dired buffer of cur dir

*** Shortcuts
    ~d~ - mark file for deletion
    ~~~ - mark all backup files for deletion
    ~x~ - execute the action (delete all marked files for instance)
    ~+~ - create new file/dir **or** ~C-x C-f~ in the dir and enter name of new file
    ~g~ - refresh contents of buffer
    ~!~ - (while pointing at any file) run shell command on this file (! index.html firefox)
    ~C~ - copy file and type new name for it
    ~R~ - rename file
    ~s~ - change sorting order of the dir.
    ~A~ - search for regexp in files in cur dir --> then press ~M-,~ to go to next match
    ~C-x C-q~ - make dired buffer editable --> after changes are done ~C-c C-c~
    ~(~ - toggle details
    ~ ~C-h i~ --> 'Emacs' --> 'Dired' -- **documentation** for Dired

*** Operating on multiple files
    ~m~ - mark file / dir
    ~u~ - unmark file
    ~U~ - unmark all files
    ~t~ - toggle marks in cur dir

Set ~(setq dired-dwim-target t)~. Now ~o~ on a dir opens this dir in
sep. window. Now mark some files and try to rename/copy them - emacs
will offer you to move them to an opened dir, just hit ~Enter~ to
submit

*** to work only on files in cur. dir.
    ~* /~ - mark all directories --> ~t~ - toggle marks (will mark all files and unmark all dirs)

** IDO | [[https://masteringemacs.org/article/introduction-to-ido-mode][source]]
*** General-purpose Commands
- ~C-d~ :: open dired buffer in cur. dir.
- ~C-t~ :: toggle matching by regexp
- ~//~ :: ignore the preceding path
- ~M-d~ :: searches for the input in all sub-dirs
- ~C-k~ :: kills cur. focused buffer / deletes the file (depending on the mode)
- ~M-m~ :: creates new sub-dir. to the dir. u r in

#+BEGIN_QUOTE
if ido is getting stuck on /switch-buffer/ or /find-file/ -
~C-b[uffer]~ and ~C-f[ile]~ are switching to old completion engines
#+END_QUOTE

*** Work Dir. Commands
Work directories are recently used directories that Ido caches so the
files and directories in them can be quickly recalled. Work directory
commands only function in ~find-file~ routines

- ~M-n/p~ :: cycle through next / prev. work dirs.
- ~M-k~ :: kill (remove) active work dir. from the list
- ~M-s~ :: force ido to search the list of work dir-s for cur. input

* Magit
[[https://www.youtube.com/watch?v=zobx3T7hGNA][ref 0]] [[https://www.youtube.com/watch?v=vQO7F2Q9DwA][rebasing and resolving conflicts]]

- ~<leader>gi~ :: init rep (~magit-init~)
- ~<leader>gs~ :: run magit interface (~magit-status~)

** While in magit interface
- ~n~ :: next line
- ~p~ :: prev line
- ~s~ :: stage file (or if hover category - stage all files in this category
- ~k~ :: discard changes
- ~i~ :: ignore file (don't know what it means actually)
- ~tab~ :: view changes in file --> <RET> on needed line --> edit --> go to prev buffer --> ~g~ to **refresh**
- ~g~ :: refresh the state of changed files
- ~c c~ :: commit (after wrote commit ~C-c C-c~)
- ~l l~ :: short log (shows latest commits)
- ~h~ :: **help** (shows all keys)
- ~$~ :: pop up status messages
- ~b c~ :: create new branch

** Working with Remote Repository
- ~M a~ :: add remote rep
- ~P p~ :: push
- ~f p~ :: fetch (without merging)
- ~m m~ :: merge (after fetching remote for ex.)
- ~F p~ :: pull (with merging)
- ~e~ -- resolve conflicts --> ~n~ --> choose A/B --> save

=CLONE is similer with CREATE REPO + ADD REMOTE + PULL=

** Commits (canceling / changing / squashing / splitting)
*** Canceling commit message
- ~X~
- choose type of reset u want (i needed soft, so i chose ~s~)
- **do not choose any of shown**, type HEAD~1 in minibuffer at bottom of the screen!

*** Changing commit message
~l l~ --> cursor under wrong commit --> ~r w~ to reword a commit (then write new one)

*** Squashing commits
make 1 commit from several last ones:

- ~r i[nteractively]~
- select a commit to be the starting point
- ~C-c C-c~
- ~S[quash]~

=read the cheat sheet there and do what you need=

Squash all unpushed commits:
- instead of ~r i~ do ~r l~
- *notice* all changes *are reversed* (old commits are at the top)
- prob. what you need is ~s~ (squash)

*** Splitting commit
- ~l l~
- hover needed one
- ~r m~
- @ sign shows cur. HEAD commit, move HEAD one step before it by moving cursor to prev. one and press ~x~
- choose ~master~1~
- go to main screen and commit everything separately
- ~r r~ to continue rebase

** Rebasing
- checkout to needed branch
- ~r e~ and choose master ('e' for elsewhere)
- put cursor on the conflict file and press ~e~
- select needed diff
- ~b~ to choose variant B (for instance)
- ~q~
- on main magit screen press ~g~ to **refresh** it
- ~r r~ (continue rebase)

=nice reference is shown in [[https://www.youtube.com/watch?v=vQO7F2Q9DwA][this]] video *after* 10:38=

** Bisecting
=[[https://www.lvguowei.me/post/magit-tutorial-bisect/][Bisecting]] - find the last commit that fucked up everything=

** Resolving conflicts
- hover on 'unmerged' files
- ~e~ (or E, dunno) - start of standard ediff message
- ~n~ (or N again..) - go to first commit difference
- ~A or B~ to keep one 2 changes
- ~n~ - save and add changed files

** Patch another branch's some files
- ~D[iff]~ two branches
- move focus by ~N~, ~P~
- focud needed diff
- ~a[pply]~

=same way works for new file created on dif. branch=

* Helm | [[https://emacs-helm.github.io/helm/][github]]
**Important**: In any helm session, as soon there is candidates in the
helm buffer ~C-h m~ pops an org buffer with detailed documentation
about current command and more generalized infos about helm.

That's pretty much the only thing u need to know about _Helm_

* Projectile & helm-projectile | [[https://github.com/bbatsov/projectile][github]]
- helm-projectile :: helm integration for Projectile

~<leader>pf~ (~projectile-find-file~) -- open file in project (project is considered to be a git rep)

** Ignoring files
Create .projectile file and put there rules like in gitignore, but with prefix '-':
#+BEGIN_EXAMPLE
-*.md // ignore all .md files
#+END_EXAMPLE

** Learn how to:
*make paragraph below a list using evil-mc!*

jump to a file in project
jump to a project buffer
kill all project buffers
replace in project
multi-occur in project buffers
grep in project
regenerate project etags
visit project in dired
run make in a project with a single key chord

* Use-package | [[https://github.com/jwiegley/use-package][github]]
desided to use /use-package/ due to increase in load times (lazy loading) and more structurized package management

Documentation is quite big, so better go read documentation on github
* Markdown-mode | [[https://github.com/jrblevin/markdown-mode][github]]
#+BEGIN_SRC markdown
  `C-c C-s` - commands for styling text (`C-h` - more)
  `C-c C-x` - commands for toggling

  `C-c C-l` - (_markdown-insert-link_) command for inserting new link
    markup or editing existing link markup
  `C-c C-i` - (_markdown-insert-image_) command for inserting or editing image markup
  `C-c C-x C-i` - _markdown-toggle-inline-images_ (Large images may
       be scaled down to fit in the buffer using =markdown-max-image-size=)

  # Markdown and Maintenance Commands #
  `C-c C-c m` - **compile**, run Markdown on the current buffer and show the output in another buffer.
  `C-c C-c p` - **preview**, run Markdown on the current buffer and previews, stores the output in a temporary file, and displays the file in a browser.
  `C-c C-c e` - **export**, run Markdown on the current buffer and save the result in the file basename.html.
  `C-c C-c v` - **export and view** file in browser.
  `C-c C-c o` - **open** the Markdown source file directly using markdown-open-command.
  `C-c C-c l` - **live export**, turn on `markdown-live-preview-mode` to view the exported output side-by-side with the source Markdown.

  > markdown-live-preview-window-function can be customized to open in a browser other than eww.
  > `customize markdown-split-window-direction` - force the preview window to appear at the bottom or right

  `C-c C-c c` - check for undefined references
  `C-c C-c c` - check for unused references
  `C-c C-c n` - renumbers any ordered lists in the buffer that are out of sequence
  `C-c C-c ]` - completes all headings and normalizes all horizontal rules in the buffer

  # Lists #
  `M-RET` - insert new list item (if there are none nearby - create new list)
  > prefix command above with `C-u` to decrease folding level or `C-u C-u` to increase it

  # Outline Navigation #
  `C-c C-[n,p]` - move between the next and previous visible headings or list items of **any level**
  `C-c C-[f,b]` - ... **at the same level as the one at the point**

  # Tables #
  |one|two|three|four|five|
  |- <-- place cursor after first dash (there could also be `|:`) and press `TAB`

  Then u can jump to next / prev. cell with `TAB / S-TAB`

  > check table shortcuts [here](https://github.com/jrblevin/markdown-mode) (`C-f` --> table editing)

  # Other commands #

  `C-c C-o` - follow link below cursor
  `M-p/n` - jump between links

  `C-c C-d` - add todo checkmark? wut? it should do something, like reallign table below cursor
  `C-c C-[-/=]` - promote demote heading / bold / italic text below cursor
  `C-c C-[` - complete markup (mainly used on headers)

  `C-c arrows` - move / indent list **item** | move / promote / demote **heading**


  # Customization #
  How to customize this package u will find [here](https://github.com/jrblevin/markdown-mode#customization)

  # GitHub Flavored Markdown (GFM) #

  [GitHub Flavored Markdown](https://github.com/jrblevin/markdown-mode#github-flavored-markdown-gfm)

  The GitHub implementation differs slightly from standard Markdown in that
  it supports things like different behavior for underscores inside of
  words, automatic linking of URLs, strikethrough text, and fenced code
  blocks with an optional language keyword.

#+END_SRC

* Yasnippet
~yas-describe-tables~ - run this to see all snippets
all snippets are in =~/emacs.d/elpa/yasnippet-snippets-___.518/snippets/{modes}
for performance reasons add yas-modes to different hooks
for example to add hook 'lua-mode-hook' create dir. in '~/emacs.d/snippets/lua-mode/'

~yas-new-snippet~ - create a snippet for the current major mode
#+BEGIN_EXAMPLE
  # -*- mode: snippet -*-
  # name: My HTML Template
  # key: htmldoc // <-- abbrev u type to expand a snippet
  # -- // <-- this is a separator, write snippet below
  <html>
          <head>
                  <title>$1</title> // <-- $1 means tab stop fields 1
          </head>
          <body>
                  <h1>$1</h1> // <-- tab stop fields with same numbers share content
                  <p>
                          $2
                  </p>
                  $0 // <-- $0 means the last tab stop field
          </body>
  </html>

  # once created, just save it to file (no extension)
  # in the file path below u can see the major mode name for this snippet
#+END_EXAMPLE

~M-/~ - complete / expand abbreviation (Emacs)
* Autocomplete | [[https://github.com/auto-complete/auto-complete/blob/master/doc/manual.md][github]]
- ~M-n/p/{number}~ :: move to next / prev / {number} candidate in the list
- ~C-s~ :: search among possible completions (i've enabled it in config)
* Other small pkgs
** Dashboard
After opening emacs move to last recent opened file with ~TAB~
