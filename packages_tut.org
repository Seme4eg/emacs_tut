* Preinstalled packages
** Dired
~C-x C-f~ (def shortcut) <RET> -- open dired buffer of cur dir

*** Shortcuts
    ~d~ - mark file for deletion
    ~~~ - mark all backup files for deletion
    ~x~ - execute the action (delete all marked files for instance)
    ~+~ - create new file/dir **or** ~C-x C-f~ in the dir and enter name of new file
    ~g~ - refresh contents of buffer
    ~!~ - (while pointing at any file) run shell command on this file (! index.html firefox)
    ~C~ - copy file and type new name for it
    ~R~ - rename file
    ~s~ - change sorting order of the dir.
    ~A~ - search for regexp in files in cur dir --> then press ~M-,~ to go to next match
    ~C-x C-q~ - make dired buffer editable --> after changes are done ~C-c C-c~
    ~(~ - toggle details
    ~ ~C-h i~ --> 'Emacs' --> 'Dired' -- **documentation** for Dired

*** Operating on multiple files
    ~m~ - mark file / dir
    ~u~ - unmark file
    ~U~ - unmark all files
    ~t~ - toggle marks in cur dir

Set ~(setq dired-dwim-target t)~. Now ~o~ on a dir opens this dir in
sep. window. Now mark some files and try to rename/copy them - emacs
will offer you to move them to an opened dir, just hit ~Enter~ to
submit

*** to work only on files in cur. dir.
    ~* /~ - mark all directories --> ~t~ - toggle marks (will mark all files and unmark all dirs)

** IDO
// fill this section
* Magit
[[https://www.youtube.com/watch?v=zobx3T7hGNA][ref 0]] [[https://www.youtube.com/watch?v=vQO7F2Q9DwA][ref 1]]

- ~<leader>gi~ :: init rep (~magit-init~)
- ~<leader>gs~ :: run magit interface (~magit-status~)

** While in magit interface
- ~n~ :: next line
- ~p~ :: prev line
- ~s~ :: stage file (or if hover category - stage all files in this category
- ~k~ :: discard changes
- ~i~ :: ignore file (don't know what it means actually)
- ~tab~ :: view changes in file --> <RET> on needed line --> edit --> go to prev buffer --> ~g~ to **refresh**
- ~g~ :: refresh the state of changed files
- ~c c~ :: commit (after wrote commit ~C-c C-c~)
- ~l l~ :: short log (shows latest commits)
- ~h~ :: **help** (shows all keys)
- ~$~ :: pop up status messages
- ~b c~ :: create new branch

** Working with Remote Repository
- ~M a~ :: add remote rep
- ~P p~ :: push
- ~m m~ :: merge
- ~F F~ :: fetch
- ~e~ -- resolve conflicts --> ~n~ --> choose A/B --> save

** Commits (canceling / changing / squashing / splitting)
*** Canceling commit message
- ~X~
- choose type of reset u want (i needed soft, so i chose ~s~)
- **do not choose any of shown**, type HEAD~1 in minibuffer at bottom of the screen!

*** Changing commit message
~l l~ --> cursor under wrong commit --> ~r w~ to reword a commit (then write new one)

*** Squashing commits
make 1 commit from /N/ last ones:

- ~l l~
- go to the oldest of /N/
- ~r i[nteractively]~
- read the cheat sheet there and do what you need
- ~C-c C-c~

Squash all unpushed commits:
- instead of ~r i~ do ~r l~
- *notice* all changes *are reversed* (old commits are at the top)
- prob. what you need is ~s~ (squash)

*** Splitting commit
- ~l l~
- hover needed one
- ~r m~
- @ sign shows cur. HEAD commit, move HEAD one step before it by moving cursor to prev. one and press ~x~
- choose ~master~1~
- go to main screen and commit everything separately
- ~r r~ to continue rebase

** Rebasing
- checkout to needed branch
- ~r e~ and choose master ('e' for elsewhere)
- put cursor on the conflict file and press ~e~
- select needed diff
- ~b~ to choose variant B (for instance)
- ~q~
- on main magit screen press ~g~ to **refresh** it
- ~r r~ (continue rebase)

=nice reference is shown in [[https://www.youtube.com/watch?v=vQO7F2Q9DwA][this]] video *after* 10:38=

** Bisecting
=[[https://www.lvguowei.me/post/magit-tutorial-bisect/][Bisecting]] - find the last commit that fucked up everything=


** Patch another branch's some files
- ~D[iff]~ two branches
- move focus by ~N~, ~P~
- focud needed diff
- ~a[pply]~

=same way works for new file created on dif. branch=

* Helm | [[https://emacs-helm.github.io/helm/][github]]
**Important**: In any helm session, as soon there is candidates in the
helm buffer ~C-h m~ pops an org buffer with detailed documentation
about current command and more generalized infos about helm.

That's pretty much the only thing u need to know about _Helm_

* Projectile & helm-projectile | [[https://github.com/bbatsov/projectile][github]]
- helm-projectile :: helm integration for Projectile

~<leader>pf~ (~projectile-find-file~) -- open file in project (project is considered to be a git rep)

** Ignoring files
Create .projectile file and put there rules like in gitignore, but with prefix '-':
#+BEGIN_EXAMPLE
-*.md // ignore all .md files
#+END_EXAMPLE

** Learn how to:
*make paragraph below a list using evil-mc!*

jump to a file in project
jump to a project buffer
kill all project buffers
replace in project
multi-occur in project buffers
grep in project
regenerate project etags
visit project in dired
run make in a project with a single key chord

* Use-package | [[https://github.com/jwiegley/use-package][github]]
desided to use /use-package/ due to increase in load times (lazy loading) and more structurized package management

Documentation is quite big, so better go read documentation on github
